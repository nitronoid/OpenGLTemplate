#ifndef EDGE_H
#define EDGE_H

#include <QOpenGLFunctions>

namespace glt
{

struct Edge
{
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default constructor.
  //-----------------------------------------------------------------------------------------------------
  Edge() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy constructor.
  //-----------------------------------------------------------------------------------------------------
  Edge(const Edge&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Edge& operator=(const Edge&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move constructor.
  //-----------------------------------------------------------------------------------------------------
  Edge(Edge&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move assignment operator.
  //-----------------------------------------------------------------------------------------------------
  Edge& operator=(Edge&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default destructor.
  //-----------------------------------------------------------------------------------------------------
  ~Edge() = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Constructor that takes two vertex indices.
  /// @param _a is a vertex index representing one of the vertices that contributes to this edge.
  /// @param _b is a vertex index representing one of the vertices that contributes to this edge.
  //-----------------------------------------------------------------------------------------------------
  Edge(const GLushort _a, const GLushort _b) :
    p(std::min(_a, _b), std::max(_a, _b))
  {}
  //-----------------------------------------------------------------------------------------------------
  /// @brief Used for hashing.
  //-----------------------------------------------------------------------------------------------------
  friend bool operator==(const Edge &_a, const Edge &_b)
  {
    return _a.p == _b.p;
  }
  //-----------------------------------------------------------------------------------------------------
  /// @brief Internally stores a pair, which is sorted on construction.
  //-----------------------------------------------------------------------------------------------------
  std::pair<GLushort, GLushort> p;
};

}

//-----------------------------------------------------------------------------------------------------
/// @brief Define the hash struct for this Edge so we can create unordered_set's using it.
//-----------------------------------------------------------------------------------------------------
namespace std
{
template <>
struct hash<glt::Edge>
{
  size_t operator()(const glt::Edge &_key) const
  {
    return std::hash<size_t>()(std::hash<GLushort>()(_key.p.first)) ^ std::hash<GLushort>()(_key.p.second);
  }
};
}

#endif // EDGE_H
